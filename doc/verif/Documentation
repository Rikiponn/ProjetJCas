Liste des erreurs définies pour Verif.java:
	
	ErreurType:
		Indique que le type d'au moins l'un des fils n'est pas compatible avec le noeud actuel, par exemple l'instruction : 1>true levera une ErreurType 
		car l'opérande Sup ne peux pas prendre un Integer et un Boolean.
   		
   	ErreurArite:
   		Indique que l'arite du noeud n'est pas égale à celle attendu (d'après la classe Noeud.java)
   		Exemple:....Noeud.Plus
   				........Noeud.Ident	"t"
   				........Noeud.Entier "8"
   				........Noeud.Entier "9"
   		Ici, l'arite de Noeud.Plus est de 3, alors que l'arite attendu est 2. Nous levons donc une ErreurArite
   			
   	ErreurIdentNonDeclaree:
   		Indique que l'identificateur utilisé n'a jamais été déclaré auparavant (ne se lève qu'en dehors des déclarations)
   		Exemple:
   		Program
   			a : Integer;
   		begin
   			a = b + 2;
   		end.
   		Ici, b n'a jamais été déclarée, et est pourtant utilisée. Nous levons donc une ErreurIdentNonDeclaree
   		
   	ErreurBooleenAttendu:
   		L'erreur booléen attendu est le même type d'erreur que ErreurType, en précisant que le type attendu est un booléen.   
   	
   	ErreurChaineAttendu:
   		L'erreur chaine attendu est le même type d'erreur que ErreurType, en précisant que le type attendu est une chaine.   
   	
   	ErreurEntierAttendu:
   		L'erreur entier attendu est le même type d'erreur que ErreurType, en précisant que le type attendu est un entier. 
   		
Architecture de la passe 2:

	1 fonction récursive parcourant tout l'arbre est décorant en surface l'arbre (notamment les Affects et les noeuds dont on connait directement le type: Conversion, Entier, Reel, Chaine)
	Un lot de fonction s'occupant de vérifier toutes les déclarations, et d'enrichir l'environnement
	Un autre lot de fonction s'occupant de vérifier toutes les instructions et expressions, et également décorant l'arbre (notamment les Noeuds résultants d'un EXP)
	Ces fonctions sont pour la plus part des fonctions récursive afin de parcourir l'arbre en profondeur.
	
Méthodologie de test:

Sachant qu'il n'est possible de détecter qu'une seule erreur par fichier, deux politiques de tests ont été prise.
Pour tester le bon fonctionnement des instructions contextuellement correct, un seul fichier complet ne comportant que des instructions valides a été créé. Si le programme retourne une erreur, alors le compilateur n'est pas fonctionnel.
Pour les instructions contextuellement incorrect, nous avons créé un fichier pour chaque erreur possible, c'est à dire pour chaque erreur de typage de chaque opération ou encore d'initialisation.