// ---------------------------------------------------------------------------
// syntaxe.cup
// Fichier cup qui définit l'analyseur syntaxique
// ---------------------------------------------------------------------------

package fr.esisar.compilation.syntaxe;

import java_cup.runtime.*;
import fr.esisar.compilation.global.src.*;
import java.io.InputStream;

/* Code pour l'analyseur syntaxique. */
parser code {:

   /**
    * Réalise l'analyse syntaxique du fichier passé en argument (ou de
    * l'entrée standard si args est un tableau vide) et retourne
    * l'abstrait correspondant.
    * Lève l'exception ErreurLexicale en cas d'erreur lexicale, et
    * ErreurSyntaxe en cas d'erreur de syntaxe.
    */
   public static Arbre analyseSyntaxique(String[] args)
         throws Exception, ErreurLexicale, ErreurSyntaxe {

      // On récupère le fichier à analyser
      InputStream fichierCas = ArgsFichier.ouvrir(args);

      // Création de l'analyseur lexical
      Lexical analyseurLex = new Lexical(fichierCas);

      // Création de l'analyseur syntaxique
      parser analyseurSynt = new parser(analyseurLex);

      // Appel de l'analyseur syntaxique et récupération de l'arbre résultat
      Object result = analyseurSynt.parse().value;
      Arbre arbre = (Arbre) result;

      // On retourne l'arbre abstrait construit
      return arbre;
   }

   /**
    * Affiche un message d'erreur en cas d'erreur de syntaxe.
    */
   public void syntax_error(Symbol cur_token) {
      // Affichage du message d'erreur, avec le numéro de ligne
      System.out.println("Erreur de syntaxe ... ligne " + numLigne()) ;
   }

   /**
    * Méthode appelée en cas d'erreur de syntaxe.
    */
   public void unrecovered_syntax_error(Symbol cur_token)
         throws ErreurSyntaxe {
      throw new ErreurSyntaxe();
   }

   /**
    * Retourne le numéro de ligne courant.
    */
   public int numLigne() {
      // On récupère l'analyseur lexical
      Lexical anaLex = (Lexical) getScanner();
      return anaLex.numLigne();
   }
:};

/* Terminaux (tokens retournés par l'analyseur lexical. */
terminal String IDF;          // Identificateur
terminal Integer CONST_ENT;   // Constante entière
terminal Float CONST_REEL;    // Constante réelle
terminal String CONST_CHAINE; // Constante chaîne

/* Mots réservés */
terminal   AND,         ARRAY,       BEGIN;
terminal   DIV,         DO,          DOWNTO;
terminal   ELSE,        END,         FOR;
terminal   IF,          MOD,         NEW_LINE;
terminal   NOT,         NULL,        OF;
terminal   OR,          PROGRAM,     READ;
terminal   THEN,        TO,          WHILE;
terminal   WRITE;

/* Opérateurs */
terminal INF, SUP, EGAL, DIFF, // "<", ">", "=", "/="
         INF_EGAL, SUP_EGAL,   // "<=", ">="
         PLUS, MOINS,          // "+", "-"
         MULT, DIV_REEL;       // "*", "/"

/* Autres terminaux */
terminal PAR_OUVR, PAR_FERM; // "(", ")"
terminal DOUBLE_POINT;       // ".."
terminal DEUX_POINTS;        // ":"
terminal VIRGULE;            // ","
terminal POINT_VIRGULE;      // ";"
terminal CROCH_OUVR;         // "["
terminal CROCH_FERM;         // "]"
terminal AFFECT;             // ":="
terminal POINT;              // "."

/* Définition des non terminaux de la grammaire */
non terminal Arbre program;
non terminal Arbre liste_decl;
non terminal Arbre liste_inst;
non terminal Arbre inst;
non terminal Arbre decl;
non terminal Arbre liste_idf;
non terminal Arbre type;
non terminal Arbre idf;
non terminal Arbre type_intervalle;
non terminal Arbre constante;
non terminal Arbre const;
non terminal Arbre pas;
non terminal Arbre liste_exp;
non terminal Arbre exp;
non terminal Arbre facteur;
non terminal Arbre place;

/*
   On définit les priorités des opérateurs
   Les priorités vont dans l'ordre croissant
   On déclare egalement l'associativité des opérateurs
   (left, right, ou nonassoc)
*/

precedence nonassoc INF, SUP, EGAL, DIFF, INF_EGAL, SUP_EGAL;
precedence left PLUS, MOINS, OR;
precedence left MULT, DIV_REEL, DIV, MOD, AND;
precedence nonassoc NOT;

program ::= PROGRAM:p liste_decl:a1 BEGIN liste_inst:a2 END POINT
   {:
      RESULT = Arbre.creation2(Noeud.Programme, a1, a2, pleft);
      // pleft : Numéro de ligne du mot réservé "program".
   :}
   ;
liste_decl ::= liste_decl:a1 decl:a2 POINT_VIRGULE
   {:
      RESULT = Arbre.creation2(Noeud.ListeDecl, a1, a2, a2.getNumLigne());
   :}
   |  // epsilon
   {:
      RESULT = Arbre.creation0(Noeud.Vide, parser.numLigne());
   :}
   ;

// ---------------------------------------------
// ECRIRE LES ACTIONS POUR LES REGLES SUIVANTES
// ---------------------------------------------

// Format : RESULT = Arbre.creation(Noeud., a1, a.getNumLigne());



decl ::= liste_idf:a1 DEUX_POINTS type:a2
   {:
        RESULT = Arbre.creation2(Noeud.decl, a1, a2, a2.getNumLigne());
   :}
   ;
liste_idf ::= liste_idf:a1 VIRGULE idf:a2
   {:
        RESULT = Arbre.creation2(Noeud.liste_idf, a1, a2, a2.getNumLigne());
   :}
   |  idf:a1
   {:
        RESULT = Arbre.creation1(Noeud.liste_idf, a1, a1.getNumLigne());
   :}
   ;

type ::= idf:a1
   {:
        RESULT = Arbre.creation1(Noeud.type, a1, a2, a2.getNumLigne());
   :}
   |  type_intervalle:a1
   {:
        RESULT = Arbre.creation1(Noeud.type, a1, a1.getNumLigne());
   :}
   |  ARRAY CROCH_OUVR type_intervalle:a1 CROCH_FERM OF type:a2
   {:
        RESULT = Arbre.creation2(Noeud.type, a1, a2, a2.getNumLigne());
   :}
   ;

type_intervalle ::= constante:a1 DOUBLE_POINT constante:a2
   {:
        RESULT = Arbre.creation2(Noeud.type_intervalle, a1, a2, a2.getNumLigne());
   :}
   ;

constante ::= PLUS const:a1
   {:
        RESULT = Arbre.creation1(Noeud.constante, a1, a1.getNumLigne());
   :}
   |  MOINS const:a1
   {:
        RESULT = Arbre.creation1(Noeud.constante, a1, a1.getNumLigne());
   :}
   |  const:a1
   {:
        RESULT = Arbre.creation1(Noeud.constante, a1, a1.getNumLigne());
   :}
   ;

const ::= CONST_ENT
   {:
        RESULT = Arbre.creation0(Noeud.const, parser.numLigne());
   :}
   |  idf:a1
   {:
        RESULT = Arbre.creation1(Noeud.const, a1, a1.getNumLigne());
   :}
   ;
idf ::= IDF
   {:
        RESULT = Arbre.creation0(Noeud.idf, parser.numLigne());
   :}
   ;

liste_inst ::= liste_inst:a1 inst:a2 POINT_VIRGULE
   {:
        RESULT = Arbre.creation2(Noeud.liste_inst, a1, a2, a2.getNumLigne());
   :}
   |  inst:a1 POINT_VIRGULE
   {:
        RESULT = Arbre.creation1(Noeud.liste_inst, a1, a1.getNumLigne());
   :}
   ;

inst ::= NULL
  {:
	RESULT = Arbre.creation0(Noeud.inst, parser.numLigne());
  :}
  |  place:a1 AFFECT exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.inst, a1, a2, a2.getNumLigne());
  :}
  |  FOR pas:a1 DO liste_inst:a2 END
  {:
     RESULT = Arbre.creation2(Noeud.inst, a1, a2, a2.getNumLigne());
  :}
  |  WHILE exp:a1 DO liste_inst:a2 END
  {:
     RESULT = Arbre.creation2(Noeud.inst, a1, a2, a2.getNumLigne());
  :}
  |  IF exp:a1 THEN liste_inst:a2 END
  {:
     RESULT = Arbre.creation2(Noeud.inst, a1, a2, a2.getNumLigne());
  :}
  |  IF exp:a1 THEN liste_inst:a2 ELSE liste_inst:a3 END
  {:
     RESULT = Arbre.creation3(Noeud.inst, a1, a2, a3, a3.getNumLigne());
  :}
  |  WRITE PAR_OUVR liste_exp:a1 PAR_FERM
  {:
     RESULT = Arbre.creation1(Noeud.inst, a1, a1.getNumLigne());
  :}
  |  READ PAR_OUVR place:a1 PAR_FERM
  {:
     RESULT = Arbre.creation1(Noeud.inst, a1, a1.getNumLigne());
  :}
  |  NEW_LINE
  {:
     RESULT = Arbre.creation0(Noeud.inst, parser.numLigne());
  :}
  ;

pas ::= idf:a1 AFFECT exp:a2 TO exp:a3
  {:
     RESULT = Arbre.creation3(Noeud.pas, a1, a2, a3, a3.getNumLigne());
  :}
  |  idf:a1 AFFECT exp:a2 DOWNTO exp:a3
  {:
     RESULT = Arbre.creation3(Noeud.pas, a1, a2, a3, a3.getNumLigne());
  :}
  ;

liste_exp ::= liste_exp:a1 VIRGULE exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.liste_exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1
  {:
     RESULT = Arbre.creation1(Noeud.liste_exp, a1, a1.getNumLigne());
  :}
  ;

exp ::= facteur:a1
  {:
     RESULT = Arbre.creation1(Noeud.exp, a1, a1.getNumLigne());
  :}
  |  exp:a1 AND exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 OR exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 EGAL exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 INF_EGAL exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 SUP_EGAL exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 DIFF exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 INF exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 SUP exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 PLUS exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 MOINS exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 MULT exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 DIV_REEL exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 MOD exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  exp:a1 DIV exp:a2
  {:
     RESULT = Arbre.creation2(Noeud.exp, a1, a2, a2.getNumLigne());
  :}
  |  PLUS facteur:a1
  {:
     RESULT = Arbre.creation1(Noeud.exp, a1, a1.getNumLigne());
  :}
  |  MOINS facteur:a1
  {:
     RESULT = Arbre.creation1(Noeud.exp, a1, a1.getNumLigne());
  :}
  |  NOT facteur:a1
  {:
     RESULT = Arbre.creation1(Noeud.exp, a1, a1.getNumLigne());
  :}
  ;

facteur ::= CONST_ENT
  {:
     RESULT = Arbre.creation0(Noeud.facteur, parser.numLigne());
  :}
  |  CONST_REEL
  {:
     RESULT = Arbre.creation0(Noeud.facteur, parser.numLigne());
  :}
  |  CONST_CHAINE
  {:
     RESULT = Arbre.creation0(Noeud.facteur, parser.numLigne());
  :}
  |  place:a1
  {:
     RESULT = Arbre.creation1(Noeud.facteur, a1, a1.getNumLigne());
  :}
  |  PAR_OUVR exp PAR_FERM
  {:
     RESULT = Arbre.creation0(Noeud.facteur, parser.numLigne());
  :}
  ;

place ::= idf:a1
  {:
     RESULT = Arbre.creation1(Noeud.place, a1, a1.getNumLigne());
  :}
  |  place:a1 CROCH_OUVR exp:a2 CROCH_FERM
  {:
     RESULT = Arbre.creation2(Noeud.place, a1, a2, a2.getNumLigne());
  :}
  ;
