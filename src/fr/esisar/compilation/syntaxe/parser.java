
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 09 11:16:38 CET 2017
//----------------------------------------------------

package fr.esisar.compilation.syntaxe;

import java_cup.runtime.*;
import fr.esisar.compilation.global.src.*;
import java.io.InputStream;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 09 11:16:38 CET 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\010\000\002\002\004\000\002\003" +
    "\005\000\002\003\002\000\002\006\005\000\002\007\005" +
    "\000\002\007\003\000\002\007\002\000\002\011\003\000" +
    "\002\010\003\000\002\010\005\000\002\010\010\000\002" +
    "\012\005\000\002\013\003\000\002\013\003\000\002\013" +
    "\004\000\002\013\004\000\002\004\005\000\002\004\002" +
    "\000\002\005\005\000\002\005\007\000\002\005\007\000" +
    "\002\005\011\000\002\005\007\000\002\005\006\000\002" +
    "\005\006\000\002\005\003\000\002\005\003\000\002\015" +
    "\007\000\002\015\007\000\002\021\003\000\002\021\006" +
    "\000\002\016\005\000\002\016\003\000\002\016\002\000" +
    "\002\017\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\030\005\001\002\000\004\002\200\001" +
    "\002\000\012\004\ufffe\012\ufffe\053\ufffe\054\ufffe\001\002" +
    "\000\012\004\010\012\011\053\ufffa\054\ufffa\001\002\000" +
    "\004\055\177\001\002\000\010\053\ufff9\054\ufff9\060\ufff9" +
    "\001\002\000\024\004\uffef\017\uffef\020\uffef\021\uffef\023" +
    "\uffef\025\uffef\031\uffef\034\uffef\035\uffef\001\002\000\006" +
    "\053\ufffb\054\ufffb\001\002\000\006\053\014\054\015\001" +
    "\002\000\014\004\020\005\017\011\025\044\021\045\023" +
    "\001\002\000\004\004\010\001\002\000\006\053\ufffc\054" +
    "\ufffc\001\002\000\010\052\ufff4\055\ufff4\057\ufff4\001\002" +
    "\000\006\052\ufff3\055\ufff8\001\002\000\012\004\027\005" +
    "\017\044\021\045\023\001\002\000\004\055\ufffd\001\002" +
    "\000\012\004\027\005\017\044\021\045\023\001\002\000" +
    "\004\052\037\001\002\000\004\056\026\001\002\000\012" +
    "\004\027\005\017\044\021\045\023\001\002\000\010\052" +
    "\ufff3\055\ufff3\057\ufff3\001\002\000\004\052\035\001\002" +
    "\000\004\057\032\001\002\000\004\026\033\001\002\000" +
    "\014\004\020\005\017\011\025\044\021\045\023\001\002" +
    "\000\004\055\ufff6\001\002\000\012\004\027\005\017\044" +
    "\021\045\023\001\002\000\004\057\ufff5\001\002\000\012" +
    "\004\027\005\017\044\021\045\023\001\002\000\004\055" +
    "\ufff7\001\002\000\010\052\ufff1\055\ufff1\057\ufff1\001\002" +
    "\000\010\052\ufff2\055\ufff2\057\ufff2\001\002\000\024\004" +
    "\047\017\056\020\046\021\053\023\055\025\051\031\044" +
    "\034\045\035\054\001\002\000\004\050\174\001\002\000" +
    "\022\004\047\005\071\006\067\007\062\024\073\044\065" +
    "\045\072\050\061\001\002\000\004\004\010\001\002\000" +
    "\062\010\uffe3\013\uffe3\014\uffe3\015\uffe3\022\uffe3\027\uffe3" +
    "\032\uffe3\033\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\051\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\001\002\000" +
    "\006\056\136\060\153\001\002\000\004\055\uffe6\001\002" +
    "\000\004\055\152\001\002\000\022\004\047\005\071\006" +
    "\067\007\062\024\073\044\065\045\072\050\061\001\002" +
    "\000\004\050\060\001\002\000\004\055\uffe7\001\002\000" +
    "\004\061\057\001\002\000\004\002\001\001\002\000\026" +
    "\004\047\005\071\006\067\007\062\024\073\044\065\045" +
    "\072\050\061\051\uffdf\054\uffdf\001\002\000\022\004\047" +
    "\005\071\006\067\007\062\024\073\044\065\045\072\050" +
    "\061\001\002\000\056\010\uffca\013\uffca\014\uffca\015\uffca" +
    "\022\uffca\027\uffca\032\uffca\033\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\051\uffca\054\uffca\055\uffca\057\uffca\001\002\000" +
    "\060\010\uffc9\013\uffc9\014\uffc9\015\uffc9\022\uffc9\027\uffc9" +
    "\032\uffc9\033\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9" +
    "\054\uffc9\055\uffc9\056\136\057\uffc9\001\002\000\042\010" +
    "\101\013\106\022\103\027\115\036\107\037\116\040\105" +
    "\041\110\042\113\043\114\044\104\045\112\046\102\047" +
    "\111\051\uffe0\054\uffe0\001\002\000\014\004\047\005\071" +
    "\006\067\007\062\050\061\001\002\000\056\010\uffde\013" +
    "\uffde\014\uffde\015\uffde\022\uffde\027\uffde\032\uffde\033\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\046\uffde\047\uffde\051\uffde\054\uffde\055\uffde" +
    "\057\uffde\001\002\000\056\010\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\022\uffcb\027\uffcb\032\uffcb\033\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\051\uffcb\054\uffcb\055\uffcb\057\uffcb\001\002" +
    "\000\006\051\076\054\077\001\002\000\056\010\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\022\uffcc\027\uffcc\032\uffcc\033\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\051\uffcc\054\uffcc\055\uffcc" +
    "\057\uffcc\001\002\000\014\004\047\005\071\006\067\007" +
    "\062\050\061\001\002\000\014\004\047\005\071\006\067" +
    "\007\062\050\061\001\002\000\056\010\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\022\uffcd\027\uffcd\032\uffcd\033\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\051\uffcd\054\uffcd\055\uffcd\057\uffcd" +
    "\001\002\000\056\010\uffce\013\uffce\014\uffce\015\uffce\022" +
    "\uffce\027\uffce\032\uffce\033\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\051\uffce\054\uffce\055\uffce\057\uffce\001\002\000\004" +
    "\055\uffe9\001\002\000\022\004\047\005\071\006\067\007" +
    "\062\024\073\044\065\045\072\050\061\001\002\000\042" +
    "\010\101\013\106\022\103\027\115\036\107\037\116\040" +
    "\105\041\110\042\113\043\114\044\104\045\112\046\102" +
    "\047\111\051\uffe1\054\uffe1\001\002\000\022\004\047\005" +
    "\071\006\067\007\062\024\073\044\065\045\072\050\061" +
    "\001\002\000\022\004\047\005\071\006\067\007\062\024" +
    "\073\044\065\045\072\050\061\001\002\000\022\004\047" +
    "\005\071\006\067\007\062\024\073\044\065\045\072\050" +
    "\061\001\002\000\022\004\047\005\071\006\067\007\062" +
    "\024\073\044\065\045\072\050\061\001\002\000\022\004" +
    "\047\005\071\006\067\007\062\024\073\044\065\045\072" +
    "\050\061\001\002\000\022\004\047\005\071\006\067\007" +
    "\062\024\073\044\065\045\072\050\061\001\002\000\022" +
    "\004\047\005\071\006\067\007\062\024\073\044\065\045" +
    "\072\050\061\001\002\000\022\004\047\005\071\006\067" +
    "\007\062\024\073\044\065\045\072\050\061\001\002\000" +
    "\022\004\047\005\071\006\067\007\062\024\073\044\065" +
    "\045\072\050\061\001\002\000\022\004\047\005\071\006" +
    "\067\007\062\024\073\044\065\045\072\050\061\001\002" +
    "\000\022\004\047\005\071\006\067\007\062\024\073\044" +
    "\065\045\072\050\061\001\002\000\022\004\047\005\071" +
    "\006\067\007\062\024\073\044\065\045\072\050\061\001" +
    "\002\000\022\004\047\005\071\006\067\007\062\024\073" +
    "\044\065\045\072\050\061\001\002\000\022\004\047\005" +
    "\071\006\067\007\062\024\073\044\065\045\072\050\061" +
    "\001\002\000\042\010\101\013\106\014\uffd6\015\uffd6\022" +
    "\103\027\115\032\uffd6\033\uffd6\044\104\045\112\046\102" +
    "\047\111\051\uffd6\054\uffd6\055\uffd6\057\uffd6\001\002\000" +
    "\056\010\101\013\106\014\uffdc\015\uffdc\022\103\027\uffdc" +
    "\032\uffdc\033\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\102\047\111\051\uffdc" +
    "\054\uffdc\055\uffdc\057\uffdc\001\002\000\042\010\101\013" +
    "\106\014\uffd9\015\uffd9\022\103\027\115\032\uffd9\033\uffd9" +
    "\044\104\045\112\046\102\047\111\051\uffd9\054\uffd9\055" +
    "\uffd9\057\uffd9\001\002\000\042\010\101\013\106\014\uffda" +
    "\015\uffda\022\103\027\115\032\uffda\033\uffda\044\104\045" +
    "\112\046\102\047\111\051\uffda\054\uffda\055\uffda\057\uffda" +
    "\001\002\000\056\010\101\013\106\014\uffd4\015\uffd4\022" +
    "\103\027\uffd4\032\uffd4\033\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\102\047" +
    "\111\051\uffd4\054\uffd4\055\uffd4\057\uffd4\001\002\000\056" +
    "\010\uffd2\013\uffd2\014\uffd2\015\uffd2\022\uffd2\027\uffd2\032" +
    "\uffd2\033\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2" +
    "\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\051\uffd2\054" +
    "\uffd2\055\uffd2\057\uffd2\001\002\000\042\010\101\013\106" +
    "\014\uffd8\015\uffd8\022\103\027\115\032\uffd8\033\uffd8\044" +
    "\104\045\112\046\102\047\111\051\uffd8\054\uffd8\055\uffd8" +
    "\057\uffd8\001\002\000\042\010\101\013\106\014\uffd7\015" +
    "\uffd7\022\103\027\115\032\uffd7\033\uffd7\044\104\045\112" +
    "\046\102\047\111\051\uffd7\054\uffd7\055\uffd7\057\uffd7\001" +
    "\002\000\056\010\uffd0\013\uffd0\014\uffd0\015\uffd0\022\uffd0" +
    "\027\uffd0\032\uffd0\033\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\051\uffd0\054\uffd0\055\uffd0\057\uffd0\001\002\000\042\010" +
    "\101\013\106\014\uffdb\015\uffdb\022\103\027\115\032\uffdb" +
    "\033\uffdb\044\104\045\112\046\102\047\111\051\uffdb\054" +
    "\uffdb\055\uffdb\057\uffdb\001\002\000\056\010\101\013\106" +
    "\014\uffd5\015\uffd5\022\103\027\uffd5\032\uffd5\033\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\102\047\111\051\uffd5\054\uffd5\055\uffd5\057" +
    "\uffd5\001\002\000\056\010\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\022\uffd1\027\uffd1\032\uffd1\033\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\047\uffd1\051\uffd1\054\uffd1\055\uffd1\057\uffd1\001\002\000" +
    "\056\010\uffd3\013\uffd3\014\uffd3\015\uffd3\022\uffd3\027\uffd3" +
    "\032\uffd3\033\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\051\uffd3" +
    "\054\uffd3\055\uffd3\057\uffd3\001\002\000\056\010\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\022\uffdd\027\uffdd\032\uffdd\033\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\051\uffdd\054\uffdd\055\uffdd" +
    "\057\uffdd\001\002\000\056\010\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\022\uffcf\027\uffcf\032\uffcf\033\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\051\uffcf\054\uffcf\055\uffcf\057\uffcf\001\002" +
    "\000\022\004\047\005\071\006\067\007\062\024\073\044" +
    "\065\045\072\050\061\001\002\000\040\010\101\013\106" +
    "\022\103\027\115\036\107\037\116\040\105\041\110\042" +
    "\113\043\114\044\104\045\112\046\102\047\111\057\140" +
    "\001\002\000\062\010\uffe2\013\uffe2\014\uffe2\015\uffe2\022" +
    "\uffe2\027\uffe2\032\uffe2\033\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\051\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2" +
    "\001\002\000\040\010\101\013\106\022\103\027\115\036" +
    "\107\037\116\040\105\041\110\042\113\043\114\044\104" +
    "\045\112\046\102\047\111\051\142\001\002\000\056\010" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\022\uffc8\027\uffc8\032\uffc8" +
    "\033\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\054\uffc8" +
    "\055\uffc8\057\uffc8\001\002\000\040\010\101\013\106\022" +
    "\103\027\115\032\144\036\107\037\116\040\105\041\110" +
    "\042\113\043\114\044\104\045\112\046\102\047\111\001" +
    "\002\000\026\004\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\023\uffef\025\uffef\031\uffef\034\uffef\035\uffef\001\002\000" +
    "\026\004\047\016\146\017\147\020\046\021\053\023\055" +
    "\025\051\031\044\034\045\035\054\001\002\000\024\004" +
    "\uffef\017\uffef\020\uffef\021\uffef\023\uffef\025\uffef\031\uffef" +
    "\034\uffef\035\uffef\001\002\000\004\055\uffea\001\002\000" +
    "\024\004\047\017\151\020\046\021\053\023\055\025\051" +
    "\031\044\034\045\035\054\001\002\000\004\055\uffeb\001" +
    "\002\000\026\004\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\023\ufff0\025\ufff0\031\ufff0\034\ufff0\035\ufff0\001\002\000" +
    "\022\004\047\005\071\006\067\007\062\024\073\044\065" +
    "\045\072\050\061\001\002\000\040\010\101\013\106\022" +
    "\103\027\115\036\107\037\116\040\105\041\110\042\113" +
    "\043\114\044\104\045\112\046\102\047\111\055\uffee\001" +
    "\002\000\004\014\165\001\002\000\004\060\157\001\002" +
    "\000\022\004\047\005\071\006\067\007\062\024\073\044" +
    "\065\045\072\050\061\001\002\000\042\010\101\013\106" +
    "\015\162\022\103\027\115\033\161\036\107\037\116\040" +
    "\105\041\110\042\113\043\114\044\104\045\112\046\102" +
    "\047\111\001\002\000\022\004\047\005\071\006\067\007" +
    "\062\024\073\044\065\045\072\050\061\001\002\000\022" +
    "\004\047\005\071\006\067\007\062\024\073\044\065\045" +
    "\072\050\061\001\002\000\040\010\101\013\106\014\uffe4" +
    "\022\103\027\115\036\107\037\116\040\105\041\110\042" +
    "\113\043\114\044\104\045\112\046\102\047\111\001\002" +
    "\000\040\010\101\013\106\014\uffe5\022\103\027\115\036" +
    "\107\037\116\040\105\041\110\042\113\043\114\044\104" +
    "\045\112\046\102\047\111\001\002\000\024\004\uffef\017" +
    "\uffef\020\uffef\021\uffef\023\uffef\025\uffef\031\uffef\034\uffef" +
    "\035\uffef\001\002\000\024\004\047\017\167\020\046\021" +
    "\053\023\055\025\051\031\044\034\045\035\054\001\002" +
    "\000\004\055\uffed\001\002\000\040\010\101\013\106\014" +
    "\171\022\103\027\115\036\107\037\116\040\105\041\110" +
    "\042\113\043\114\044\104\045\112\046\102\047\111\001" +
    "\002\000\024\004\uffef\017\uffef\020\uffef\021\uffef\023\uffef" +
    "\025\uffef\031\uffef\034\uffef\035\uffef\001\002\000\024\004" +
    "\047\017\173\020\046\021\053\023\055\025\051\031\044" +
    "\034\045\035\054\001\002\000\004\055\uffec\001\002\000" +
    "\004\004\047\001\002\000\006\051\176\056\136\001\002" +
    "\000\004\055\uffe8\001\002\000\012\004\uffff\012\uffff\053" +
    "\uffff\054\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\010\006\006\007\012\011\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\021\013\023\001\001\000\004\011\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\041\001\001\000\002\001\001\000\004\013\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\030" +
    "\013\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\033\013\023" +
    "\001\001\000\002\001\001\000\004\013\035\001\001\000" +
    "\002\001\001\000\004\013\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\051\021" +
    "\047\001\001\000\002\001\001\000\010\017\167\020\065" +
    "\021\062\001\001\000\006\011\155\015\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\142\020\065\021\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\067\017\063\020\065\021\062\001" +
    "\001\000\010\017\140\020\065\021\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\134\021\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\074\021" +
    "\062\001\001\000\006\020\073\021\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\077\020\065\021\062\001\001\000\002\001\001\000\010" +
    "\017\133\020\065\021\062\001\001\000\010\017\132\020" +
    "\065\021\062\001\001\000\010\017\131\020\065\021\062" +
    "\001\001\000\010\017\130\020\065\021\062\001\001\000" +
    "\010\017\127\020\065\021\062\001\001\000\010\017\126" +
    "\020\065\021\062\001\001\000\010\017\125\020\065\021" +
    "\062\001\001\000\010\017\124\020\065\021\062\001\001" +
    "\000\010\017\123\020\065\021\062\001\001\000\010\017" +
    "\122\020\065\021\062\001\001\000\010\017\121\020\065" +
    "\021\062\001\001\000\010\017\120\020\065\021\062\001" +
    "\001\000\010\017\117\020\065\021\062\001\001\000\010" +
    "\017\116\020\065\021\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\136\020\065\021\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\144\001\001" +
    "\000\006\005\051\021\047\001\001\000\004\004\147\001" +
    "\001\000\002\001\001\000\006\005\051\021\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\153\020" +
    "\065\021\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\157\020\065\021\062\001" +
    "\001\000\002\001\001\000\010\017\163\020\065\021\062" +
    "\001\001\000\010\017\162\020\065\021\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\165\001\001" +
    "\000\006\005\051\021\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\171\001\001\000\006\005\051" +
    "\021\047\001\001\000\002\001\001\000\004\021\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   /**
    * Réalise l'analyse syntaxique du fichier passé en argument (ou de
    * l'entrée standard si args est un tableau vide) et retourne
    * l'abstrait correspondant.
    * Lève l'exception ErreurLexicale en cas d'erreur lexicale, et
    * ErreurSyntaxe en cas d'erreur de syntaxe.
    */
   public static Arbre analyseSyntaxique(String[] args)
         throws Exception, ErreurLexicale, ErreurSyntaxe {

      // On récupère le fichier à analyser
      InputStream fichierCas = ArgsFichier.ouvrir(args);

      // Création de l'analyseur lexical
      Lexical analyseurLex = new Lexical(fichierCas);

      // Création de l'analyseur syntaxique
      parser analyseurSynt = new parser(analyseurLex);

      // Appel de l'analyseur syntaxique et récupération de l'arbre résultat
      Object result = analyseurSynt.parse().value;
      Arbre arbre = (Arbre) result;

      // On retourne l'arbre abstrait construit
      return arbre;
   }

   /**
    * Affiche un message d'erreur en cas d'erreur de syntaxe.
    */
   public void syntax_error(Symbol cur_token) {
      // Affichage du message d'erreur, avec le numéro de ligne
      System.out.println("Erreur de syntaxe ... ligne " + numLigne()) ;
   }

   /**
    * Méthode appelée en cas d'erreur de syntaxe.
    */
   public void unrecovered_syntax_error(Symbol cur_token)
         throws ErreurSyntaxe {
      throw new ErreurSyntaxe();
   }

   /**
    * Retourne le numéro de ligne courant.
    */
   public int numLigne() {
      // On récupère l'analyseur lexical
      Lexical anaLex = (Lexical) getScanner();
      return anaLex.numLigne();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // facteur ::= PAR_OUVR exp PAR_FERM 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // facteur ::= place 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a1;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // facteur ::= CONST_CHAINE 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creationChaine(a1, parser.numLigne());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // facteur ::= CONST_REEL 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float a1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creationReel(a1, parser.numLigne());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // facteur ::= CONST_ENT 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creationEntier(a1, parser.numLigne());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= NOT facteur 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation1(Noeud.Non, a1, a1.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= MOINS facteur 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation1(Noeud.MoinsUnaire, a1, a1.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= PLUS facteur 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation1(Noeud.PlusUnaire, a1, a1.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp DIV exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Quotient, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp MOD exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Reste, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp DIV_REEL exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.DivReel, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MULT exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Mult, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MOINS exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Moins, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp PLUS exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Plus, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp SUP exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Sup, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp INF exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Inf, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp DIFF exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.NonEgal, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp SUP_EGAL exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.SupEgal, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp INF_EGAL exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.InfEgal, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp EGAL exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Egal, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp OR exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Ou, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp AND exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Et, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= facteur 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = a1;
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // liste_exp ::= 
            {
              Arbre RESULT =null;
		
     RESULT = Arbre.creation0(Noeud.Vide, parser.numLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // liste_exp ::= exp 
            {
              Arbre RESULT =null;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = Arbre.creation2(Noeud.ListeExp, Arbre.creation0(Noeud.Vide,parser.numLigne()), a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // liste_exp ::= liste_exp VIRGULE exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.ListeExp, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // place ::= place CROCH_OUVR exp CROCH_FERM 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = Arbre.creation2(Noeud.Index, a1, a2, a2.getNumLigne());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("place",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // place ::= IDF 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creationIdent(a1, parser.numLigne());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("place",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pas ::= idf AFFECT exp DOWNTO exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a3 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation3(Noeud.Decrement, a1, a2, a3, a3.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pas",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // pas ::= idf AFFECT exp TO exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a3 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation3(Noeud.Increment, a1, a2, a3, a3.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pas",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inst ::= NULL 
            {
              Arbre RESULT =null;
		
    RESULT = Arbre.creation0(Noeud.Nop, parser.numLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inst ::= NEW_LINE 
            {
              Arbre RESULT =null;
		
     RESULT = Arbre.creation0(Noeud.Ligne, parser.numLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inst ::= READ PAR_OUVR place PAR_FERM 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
     RESULT = Arbre.creation1(Noeud.Lecture, a1, a1.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inst ::= WRITE PAR_OUVR liste_exp PAR_FERM 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
     RESULT = Arbre.creation1(Noeud.Ecriture, a1, a1.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inst ::= IF exp THEN liste_inst END 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
     RESULT = Arbre.creation3(Noeud.Si, a1, a2, Arbre.creation2(Noeud.ListeInst, Arbre.creation0(Noeud.Vide, parser.numLigne()), Arbre.creation0(Noeud.Nop, parser.numLigne()), parser.numLigne()), a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inst ::= IF exp THEN liste_inst ELSE liste_inst END 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a3 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
     RESULT = Arbre.creation3(Noeud.Si, a1, a2, a3, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inst ::= WHILE exp DO liste_inst END 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
     RESULT = Arbre.creation2(Noeud.TantQue, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inst ::= FOR pas DO liste_inst END 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
     RESULT = Arbre.creation2(Noeud.Pour, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inst ::= place AFFECT exp 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
     RESULT = Arbre.creation2(Noeud.Affect, a1, a2, a2.getNumLigne());
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // liste_inst ::= 
            {
              Arbre RESULT =null;
		
        RESULT = Arbre.creation0(Noeud.Vide, parser.numLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_inst",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // liste_inst ::= liste_inst inst POINT_VIRGULE 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = Arbre.creation2(Noeud.ListeInst, a1, a2, a2.getNumLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_inst",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constante ::= MOINS constante 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creation1(Noeud.MoinsUnaire, a1, a1.getNumLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constante ::= PLUS constante 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creation1(Noeud.PlusUnaire, a1, a1.getNumLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constante ::= IDF 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           RESULT = Arbre.creationIdent(a1, parser.numLigne());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constante ::= CONST_ENT 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer a1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         RESULT = Arbre.creationEntier(a1, parser.numLigne());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_intervalle ::= constante DOUBLE_POINT constante 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creation2(Noeud.Intervalle, a1, a2, a2.getNumLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_intervalle",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= ARRAY CROCH_OUVR type_intervalle CROCH_FERM OF type 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creation2(Noeud.Tableau, a1, a2, a2.getNumLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= constante DOUBLE_POINT constante 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           RESULT = Arbre.creation2(Noeud.Intervalle, a1, a2, a2.getNumLigne());
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= IDF 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creationIdent(a1,parser.numLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // idf ::= IDF 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creationIdent(a1,parser.numLigne());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idf",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // liste_idf ::= 
            {
              Arbre RESULT =null;
		
        RESULT = Arbre.creation0(Noeud.Vide, parser.numLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_idf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // liste_idf ::= idf 
            {
              Arbre RESULT =null;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
           RESULT = Arbre.creation2(Noeud.ListeIdent, Arbre.creation0(Noeud.Vide, parser.numLigne()), a2, a2.getNumLigne());
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_idf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // liste_idf ::= liste_idf VIRGULE idf 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creation2(Noeud.ListeIdent, a1, a2, a2.getNumLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_idf",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= liste_idf DEUX_POINTS type 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = Arbre.creation2(Noeud.Decl, a1, a2, a2.getNumLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // liste_decl ::= 
            {
              Arbre RESULT =null;
		
      RESULT = Arbre.creation0(Noeud.Vide, parser.numLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // liste_decl ::= liste_decl decl POINT_VIRGULE 
            {
              Arbre RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      RESULT = Arbre.creation2(Noeud.ListeDecl, a1, a2, a2.getNumLigne());
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbre start_val = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROGRAM liste_decl BEGIN liste_inst END POINT 
            {
              Arbre RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Arbre a1 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arbre a2 = (Arbre)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      RESULT = Arbre.creation2(Noeud.Programme, a1, a2, pleft);
      // pleft : Numéro de ligne du mot réservé "program".
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

