/* The following code was generated by JFlex 1.4.3 on 24/09/17 14:31 */

// ---------------------------------------------------------------------------
// Fichier d'entrée JFLex pour l'analyseur lexical
// ---------------------------------------------------------------------------

package fr.esisar.compilation.syntaxe;

import java_cup.runtime.*;
import java.util.Hashtable;

/**
 * La classe Lexical permet de realiser l'analyse lexicale.
 */


public class Lexical implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\14\25\0\1\4\1\5\1\6\5\5\1\56\1\57"+
    "\1\47\1\11\1\54\1\10\1\51\1\50\12\1\1\55\1\60\1\44"+
    "\1\46\1\45\2\5\4\2\1\12\3\2\1\17\10\2\1\16\1\2"+
    "\1\20\2\2\1\15\3\2\1\52\1\5\1\53\1\5\1\3\1\5"+
    "\1\31\1\42\1\2\1\32\1\13\1\36\1\34\1\22\1\23\2\2"+
    "\1\24\1\35\1\27\1\26\1\33\1\2\1\30\1\40\1\25\1\37"+
    "\1\41\1\21\1\2\1\43\1\2\4\5\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\3\1\4\15\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\0\1\2\1\0\1\24\1\4\4\3\1\25\1\3"+
    "\1\26\1\27\1\30\7\3\1\31\4\3\1\32\1\33"+
    "\1\34\1\35\1\36\2\37\1\3\1\40\4\3\1\41"+
    "\2\3\1\42\1\3\1\43\2\3\1\44\1\45\1\3"+
    "\2\0\1\46\2\3\1\47\1\3\1\50\1\51\4\3"+
    "\1\37\1\0\1\52\1\53\1\3\1\54\2\3\1\55"+
    "\1\3\1\56\2\3\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\61"+
    "\0\u0157\0\61\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\61\0\61\0\u0467\0\u0498\0\61\0\61\0\61"+
    "\0\u04c9\0\61\0\61\0\61\0\u04fa\0\u052b\0\365\0\u055c"+
    "\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\223\0\u0682\0\223"+
    "\0\223\0\223\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\61\0\61"+
    "\0\61\0\61\0\61\0\u08ff\0\u0930\0\u0961\0\223\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\223\0\u0a56\0\u0a87\0\223\0\u0ab8"+
    "\0\223\0\u0ae9\0\u0b1a\0\223\0\223\0\u0b4b\0\u0b7c\0\u0bad"+
    "\0\223\0\u0bde\0\u0c0f\0\223\0\u0c40\0\223\0\223\0\u0c71"+
    "\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d35\0\223\0\223\0\u0d66"+
    "\0\223\0\u0d97\0\u0dc8\0\223\0\u0df9\0\223\0\u0e2a\0\u0e5b"+
    "\0\223\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\5"+
    "\1\7\1\10\1\4\1\11\1\12\1\13\3\4\1\14"+
    "\1\4\1\15\1\4\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\4\1\25\1\26\3\4\1\27\1\4"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\61\0\1\45\1\46"+
    "\12\45\1\0\44\45\1\0\3\4\6\0\2\4\1\0"+
    "\27\4\21\0\1\5\2\0\1\5\52\0\5\47\1\50"+
    "\1\0\4\47\1\0\44\47\10\0\1\51\51\0\3\4"+
    "\6\0\2\4\1\0\7\4\1\52\2\4\1\53\14\4"+
    "\16\0\3\4\6\0\2\4\1\0\1\4\1\54\11\4"+
    "\1\54\13\4\16\0\3\4\6\0\2\4\1\0\1\4"+
    "\1\54\3\4\1\55\5\4\1\54\13\4\16\0\3\4"+
    "\6\0\2\4\1\0\21\4\1\56\5\4\16\0\3\4"+
    "\6\0\2\4\1\0\5\4\1\57\3\4\1\60\15\4"+
    "\16\0\3\4\6\0\2\4\1\0\13\4\1\61\5\4"+
    "\1\62\5\4\16\0\3\4\6\0\1\4\1\63\1\0"+
    "\11\4\1\64\10\4\1\65\4\4\16\0\3\4\6\0"+
    "\1\4\1\66\1\0\27\4\16\0\3\4\6\0\2\4"+
    "\1\0\12\4\1\67\1\70\13\4\16\0\3\4\6\0"+
    "\2\4\1\0\6\4\1\71\2\4\1\72\15\4\16\0"+
    "\3\4\6\0\2\4\1\0\13\4\1\73\13\4\16\0"+
    "\3\4\6\0\2\4\1\0\11\4\1\74\15\4\16\0"+
    "\3\4\6\0\2\4\1\0\11\4\1\75\15\4\16\0"+
    "\3\4\6\0\1\4\1\76\1\0\27\4\63\0\1\77"+
    "\60\0\1\100\60\0\1\101\63\0\1\102\55\0\1\103"+
    "\13\0\1\104\57\0\1\45\1\105\12\45\1\0\44\45"+
    "\6\0\1\47\53\0\13\51\1\0\44\51\1\0\3\4"+
    "\6\0\2\4\1\0\23\4\1\106\3\4\16\0\3\4"+
    "\6\0\2\4\1\0\15\4\1\107\11\4\16\0\3\4"+
    "\6\0\2\4\1\0\2\4\1\110\3\4\1\110\20\4"+
    "\16\0\3\4\6\0\2\4\1\0\6\4\1\111\20\4"+
    "\16\0\3\4\6\0\1\4\1\112\1\0\27\4\16\0"+
    "\3\4\6\0\2\4\1\0\4\4\1\113\22\4\16\0"+
    "\3\4\6\0\2\4\1\0\10\4\1\114\16\4\16\0"+
    "\3\4\6\0\2\4\1\0\7\4\1\115\17\4\16\0"+
    "\3\4\6\0\2\4\1\0\14\4\1\116\12\4\16\0"+
    "\3\4\6\0\2\4\1\0\15\4\1\117\11\4\16\0"+
    "\3\4\6\0\2\4\1\0\13\4\1\120\13\4\16\0"+
    "\3\4\6\0\2\4\1\0\24\4\1\121\2\4\16\0"+
    "\3\4\6\0\2\4\1\0\4\4\1\122\22\4\16\0"+
    "\3\4\6\0\2\4\1\0\11\4\1\123\15\4\16\0"+
    "\3\4\6\0\2\4\1\0\15\4\1\124\11\4\16\0"+
    "\3\4\6\0\2\4\1\0\13\4\1\125\13\4\16\0"+
    "\3\4\6\0\2\4\1\0\17\4\1\126\7\4\16\0"+
    "\1\104\10\0\2\127\45\0\1\45\1\105\10\45\2\130"+
    "\1\0\44\45\1\0\3\4\6\0\1\4\1\131\1\0"+
    "\27\4\16\0\3\4\6\0\2\4\1\0\3\4\1\132"+
    "\4\4\1\132\16\4\16\0\3\4\6\0\2\4\1\0"+
    "\7\4\1\133\17\4\16\0\3\4\6\0\2\4\1\0"+
    "\12\4\1\134\14\4\16\0\2\4\1\135\6\0\2\4"+
    "\1\0\27\4\16\0\3\4\6\0\2\4\1\0\7\4"+
    "\1\136\17\4\16\0\3\4\6\0\2\4\1\0\15\4"+
    "\1\137\11\4\16\0\3\4\6\0\2\4\1\0\14\4"+
    "\1\140\12\4\16\0\3\4\6\0\2\4\1\0\12\4"+
    "\1\141\14\4\16\0\3\4\6\0\2\4\1\0\17\4"+
    "\1\142\7\4\16\0\3\4\6\0\2\4\1\0\6\4"+
    "\1\143\20\4\16\0\1\144\6\0\2\145\50\0\1\104"+
    "\6\0\2\145\50\0\3\4\6\0\2\146\1\0\27\4"+
    "\16\0\3\4\6\0\1\4\1\147\1\0\27\4\16\0"+
    "\3\4\6\0\2\4\1\0\7\4\1\150\17\4\16\0"+
    "\3\4\6\0\2\4\1\0\26\4\1\151\16\0\3\4"+
    "\6\0\2\4\1\0\10\4\1\152\16\4\16\0\3\4"+
    "\6\0\2\4\1\0\13\4\1\153\13\4\16\0\3\4"+
    "\6\0\2\4\1\0\12\4\1\154\14\4\16\0\1\144"+
    "\60\0\3\4\6\0\2\4\1\0\6\4\1\155\20\4"+
    "\16\0\3\4\6\0\2\4\1\0\11\4\1\156\15\4"+
    "\16\0\3\4\6\0\2\4\1\0\14\4\1\157\12\4"+
    "\16\0\3\4\6\0\2\4\1\0\12\4\1\160\14\4"+
    "\16\0\3\4\6\0\2\4\1\0\20\4\1\161\6\4"+
    "\16\0\3\4\6\0\1\4\1\162\1\0\27\4\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3724];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\1\11\17\1\2\11"+
    "\2\1\3\11\1\1\3\11\1\0\1\1\1\0\27\1"+
    "\5\11\23\1\2\0\14\1\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[114];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   /**
    * Le dictionnaire associe à chaque mot réservé le code du lexème 
    * correspondant.
    */
   private final Hashtable<String,Integer> 
      dictionnaire = initialiserDictionnaire(); 

   /**
    * Initialisation du dictionnaire.
    */
   static Hashtable<String,Integer> initialiserDictionnaire() {
      Hashtable<String,Integer> dico = new Hashtable<String,Integer>();
      dico.put("and", sym.AND);
      dico.put("array", sym.ARRAY);
      dico.put("begin", sym.BEGIN);
      dico.put("div", sym.DIV);
      dico.put("do", sym.DO);
      dico.put("downto", sym.DOWNTO);
      dico.put("end", sym.END);
      dico.put("else", sym.ELSE);
      dico.put("for", sym.FOR);
      dico.put("if", sym.IF);
      dico.put("mod", sym.MOD);
      dico.put("new_line", sym.NEW_LINE);
      dico.put("not", sym.NOT);
      dico.put("null", sym.NULL);
      dico.put("of", sym.OF);
      dico.put("or", sym.OR);
      dico.put("program", sym.PROGRAM);
      dico.put("read", sym.READ);
      dico.put("then", sym.THEN);
      dico.put("to", sym.TO);
      dico.put("while", sym.WHILE);
      dico.put("write", sym.WRITE);
      return dico;
   }

   /**
    * Le numéro de la ligne courante.
    */
   int numLigne() {
      return yyline + 1;
   }

   private Symbol symbol(int code_lexeme) {
      return new Symbol(code_lexeme, numLigne(), 0);
   }

   private Symbol symbol(int code_lexeme, Object value) {
      return new Symbol(code_lexeme, numLigne(), 0, value);
   }

   /**
    * Convertit un code de lexème en String correspondante.
    */
   static String toString(int code_lexeme) {
      switch (code_lexeme) {
         case sym.IDF: 
            return "IDF";
         case sym.CONST_ENT:
            return "CONST_ENT";
         case sym.CONST_REEL:
            return "CONST_REEL";
         case sym.CONST_CHAINE:
            return "CONST_CHAINE";
         case sym.AND:
            return "AND";
         case sym.ARRAY:
            return "ARRAY";
         case sym.BEGIN:
            return "BEGIN";
         case sym.DIV:
            return "DIV";
         case sym.DO:
            return "DO";
         case sym.DOWNTO:
            return "DOWNTO";
         case sym.ELSE:
            return "ELSE";
         case sym.END:
            return "END";
         case sym.FOR:
            return "FOR";
         case sym.IF:
            return "IF";
         case sym.MOD:
            return "MOD";
         case sym.NEW_LINE:
            return "NEW_LINE";
         case sym.NOT:
            return "NOT";
         case sym.NULL:
            return "NULL";
         case sym.OF:
            return "OF";
         case sym.OR:
            return "OR";
         case sym.PROGRAM:
            return "PROGRAM";
         case sym.READ:
            return "READ";
         case sym.THEN:
            return "THEN";
         case sym.TO:
            return "TO";
         case sym.WHILE:
            return "WHILE";
         case sym.WRITE:
            return "WRITE";
         case sym.INF:
            return "INF";
         case sym.SUP:
            return "SUP";
         case sym.EGAL:
            return "EGAL";
         case sym.DIFF:
            return "DIFF";
         case sym.INF_EGAL:
            return "INF_EGAL";
         case sym.SUP_EGAL:
            return "SUP_EGAL";
         case sym.PLUS:
            return "PLUS";
         case sym.MOINS:
            return "MOINS";
         case sym.MULT:
            return "MULT";
         case sym.DIV_REEL:
            return "DIV_REEL";
         case sym.PAR_OUVR:
            return "PAR_OUVR";
         case sym.PAR_FERM:
            return "PAR_FERM";
         case sym.DOUBLE_POINT:
            return "DOUBLE_POINT";
         case sym.DEUX_POINTS:
            return "DEUX_POINTS";
         case sym.VIRGULE:
            return "VIRGULE";
         case sym.POINT_VIRGULE:
            return "POINT_VIRGULE";
         case sym.CROCH_OUVR:
            return "CROCH_OUVR";
         case sym.CROCH_FERM:
            return "CROCH_FERM";
         case sym.AFFECT:
            return "AFFECT";
         case sym.POINT:
            return "POINT";
         default:
            throw new ErreurInterneLexical(
               "Token inconnu dans toString(int code_lexeme)");
      }
   }


   /**
    * Convertit un lexème ("Symbole") en String correspondante.
    */
   static String toString(Symbol s) {
      String ts;
      switch (s.sym) {
         case sym.IDF:
            String nom = (String) s.value;
            ts = "(" + nom + ")";
            break;
         case sym.CONST_ENT:
            Integer n = (Integer) s.value;
            ts = "(" + n.intValue() + ")";
            break;
         case sym.CONST_REEL:
            Float f = (Float) s.value;
            ts = "(" + f.floatValue() + ")";
            break;
         case sym.CONST_CHAINE:
            String chaine = (String) s.value;
            ts = "(" + chaine + ")";
            break;

         default:
            ts = "";
      }
      return toString(s.sym) + ts + " " + s.left + ":" + s.right;
   }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexical(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexical(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException,    ErreurLexicale
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 48: 
          { return symbol(sym.NEW_LINE);
          }
        case 49: break;
        case 42: 
          { return symbol(sym.WRITE);
          }
        case 50: break;
        case 24: 
          { return symbol(sym.OF);
          }
        case 51: break;
        case 18: 
          { return symbol(sym.PAR_FERM);
          }
        case 52: break;
        case 22: 
          { return symbol(sym.TO);
          }
        case 53: break;
        case 27: 
          { return symbol(sym.SUP_EGAL);
          }
        case 54: break;
        case 3: 
          { try {
                                        return symbol(sym.IDF, new String(yytext ()));
                                } catch(NumberFormatException e){
                                        System.out.println("Expect idf");
                                        throw new ErreurLexicale();
                                }
          }
        case 55: break;
        case 29: 
          { return symbol(sym.DOUBLE_POINT);
          }
        case 56: break;
        case 32: 
          { return symbol(sym.END);
          }
        case 57: break;
        case 45: 
          { return symbol(sym.BEGIN);
          }
        case 58: break;
        case 11: 
          { return symbol(sym.DIV_REEL);
          }
        case 59: break;
        case 13: 
          { return symbol(sym.CROCH_OUVR);
          }
        case 60: break;
        case 33: 
          { return symbol(sym.NOT);
          }
        case 61: break;
        case 34: 
          { return symbol(sym.AND);
          }
        case 62: break;
        case 12: 
          { return symbol(sym.POINT);
          }
        case 63: break;
        case 26: 
          { return symbol(sym.INF_EGAL);
          }
        case 64: break;
        case 20: 
          { try {
                         return symbol(sym.CONST_CHAINE, new String(yytext()));
                    } catch(NumberFormatException e) {
                      }
          }
        case 65: break;
        case 35: 
          { return symbol(sym.DIV);
          }
        case 66: break;
        case 30: 
          { return symbol(sym.AFFECT);
          }
        case 67: break;
        case 5: 
          { return symbol(sym.MOINS);
          }
        case 68: break;
        case 28: 
          { return symbol(sym.DIFF);
          }
        case 69: break;
        case 17: 
          { return symbol(sym.PAR_OUVR);
          }
        case 70: break;
        case 6: 
          { return symbol(sym.PLUS);
          }
        case 71: break;
        case 36: 
          { return symbol(sym.MOD);
          }
        case 72: break;
        case 44: 
          { return symbol(sym.ARRAY);
          }
        case 73: break;
        case 31: 
          { try {
                                        return symbol(sym.CONST_REEL, new Float(yytext ()));
                                } catch(NumberFormatException e){
                                }
          }
        case 74: break;
        case 46: 
          { return symbol(sym.DOWNTO);
          }
        case 75: break;
        case 25: 
          { return symbol(sym.DO);
          }
        case 76: break;
        case 15: 
          { return symbol(sym.VIRGULE);
          }
        case 77: break;
        case 38: 
          { return symbol(sym.ELSE);
          }
        case 78: break;
        case 39: 
          { return symbol(sym.THEN);
          }
        case 79: break;
        case 10: 
          { return symbol(sym.MULT);
          }
        case 80: break;
        case 43: 
          { return symbol(sym.WHILE);
          }
        case 81: break;
        case 21: 
          { return symbol(sym.IF);
          }
        case 82: break;
        case 19: 
          { return symbol(sym.POINT_VIRGULE);
          }
        case 83: break;
        case 23: 
          { return symbol(sym.OR);
          }
        case 84: break;
        case 9: 
          { return symbol(sym.EGAL);
          }
        case 85: break;
        case 37: 
          { return symbol(sym.FOR);
          }
        case 86: break;
        case 8: 
          { return symbol(sym.SUP);
          }
        case 87: break;
        case 7: 
          { return symbol(sym.INF);
          }
        case 88: break;
        case 41: 
          { return symbol(sym.READ);
          }
        case 89: break;
        case 14: 
          { return symbol(sym.CROCH_FERM);
          }
        case 90: break;
        case 16: 
          { return symbol(sym.DEUX_POINTS);
          }
        case 91: break;
        case 1: 
          { System.out.println("Erreur Lexicale : '" +
                            yytext() + "' non reconnu ... ligne " + 
                            numLigne()) ;
                         throw new ErreurLexicale() ;
          }
        case 92: break;
        case 40: 
          { return symbol(sym.NULL);
          }
        case 93: break;
        case 47: 
          { return symbol(sym.PROGRAM);
          }
        case 94: break;
        case 4: 
          { 
          }
        case 95: break;
        case 2: 
          { try {
                         return symbol(sym.CONST_ENT, new Integer(yytext()));
                    } catch(NumberFormatException e) {
                      }
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
